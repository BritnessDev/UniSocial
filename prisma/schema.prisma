// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Event {
  id          String   @id @default(cuid())
  title       String
  description String
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  location    String?
  imageUrls   String[]
  peopleGoing Int      @default(0)
  keywords    String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  eventDate   DateTime
  price       Int?
}

model Product {
  id          String    @id @default(cuid())
  title       String
  description String?
  userId      String
  user        User      @relation("viewer", fields: [userId], references: [id], onDelete: Cascade)
  location    String?
  imageUrls   String[]
  keywords    String[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  productDate DateTime
  price       Float?
  members     User[]
}

model Deal {
  id          String   @id @default(cuid())
  title       String
  description String
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  location    String?
  imageUrls   String[]
  keywords    String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  dealDate    DateTime
  peopleGoing Int      @default(0)
  price       Int?
}

model React {
  id        String   @id @default(cuid())
  likes     Boolean
  comment   String
  groupId   String
  Group     Group    @relation(fields: [groupId], references: [id])
  Profile   Profile? @relation(fields: [profileId], references: [id])
  profileId String?
}

model Group {
  id          String   @id @default(cuid())
  name        String
  classCode   String
  description String
  location    String?
  type        String
  isPrivated  Boolean
  photos      String[]
  files       String[]
  keywords    String[]
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  React       React[]
  user        User     @relation("owner", fields: [userId], references: [id], onDelete: Cascade)
  members     User[]
}

model Job {
  id          String   @id @default(cuid())
  name        String
  description String[]
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type        Boolean
  workTime    Int
  location    String?
  companyId   String
  company     Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  hourRate    Float
  keywords    String[]
  peopleGoing Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Company {
  id             String   @id @default(cuid())
  companyWebsite String
  companyEmail   String
  Job            Job[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model TrendNews {
  id        String   @id @default(cuid())
  title     String
  photos    String[]
  news      String
  files     String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Profile {
  id          String   @id @default(cuid())
  university  String
  phoneNumber String
  location    String?
  description String
  website     String
  degree      String
  age         Int
  major       String
  React       React[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  keywords    String[]
  bio         String
  instagram   String
  facebook    String
  User        User[]
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Notification {
  id                String  @id @default(cuid())
  userId            String
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  isEmailNewMessage Boolean
  isSmsNewMessage   Boolean
  isEmailNewTasks   Boolean
  isSmsNewTasks     Boolean
  isEmailBillPay    Boolean
  isSmsBillPay      Boolean
  isEmailUpdateAnn  Boolean
  isSmsUpdateAnn    Boolean
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  role          String?
  degree        String?
  age           Int?
  productId     String?
  accounts      Account[]
  sessions      Session[]
  Event         Event[]
  Product       Product[]
  Deal          Deal[]
  Group         Group[]
  Job           Job[]
  profileId     String?
  Notification  Notification[]
  OwnerGroup    Group[]        @relation("owner")
  ViewerProduct Product[]      @relation("viewer")
  Profile       Profile?       @relation(fields: [profileId], references: [id])
  ApiSetting    UserApiToken[]
}

model UserApiToken {
  id            String         @id @default(cuid())
  userId        String         
  User          User            @relation(fields: [userId], references: [id])
  facebook      String
  twitter       String
  google        String
  youtube       String
  stripe        String
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
